generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int               @id @default(autoincrement())
  username             String            @unique
  email                String            @unique
  password             String
  profilePictureUrl    String?
  createdAt            DateTime          @default(now())
  bio                  String?
  followers            Int               @default(0)
  following            Int               @default(0)
  stamp                Boolean           @default(false)
  mercadoPagoAccountId Int?
  Comment              Comment[]
  donations            Donation[]
  receivedFriendships  Friendship[]      @relation("ReceivedFriendships")
  sentFriendships      Friendship[]      @relation("SentFriendships")
  gamesAdded           Game[]            @relation("AddedGames")
  GameFollower         GameFollower[]
  GameUser             GameUser[]
  likes                Like[]
  receivedMessages     Message[]         @relation("ReceiverMessages")
  sentMessages         Message[]         @relation("SenderMessages")
  posts                Post[]
  Subscription         Subscription?
  UserGameBenefit      UserGameBenefit[]
  views                View[]
  games                Game[]            @relation("GameToUser")
}

model Subscription {
  id                   Int          @id @default(autoincrement())
  type                 String
  price                Float
  isActive             Boolean      @default(true)
  userId               Int          @unique
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  expiresAt            DateTime
  stripeId             String
  stripeCustomerId     String       @default("")
  stripeSubscriptionId String       @default("")
  planChanges          PlanChange[]
  user                 User         @relation(fields: [userId], references: [id])
}

model Donation {
  id              Int               @id @default(autoincrement())
  amount          Float
  description     String
  payerEmail      String
  gameId          Int
  userId          Int
  token           String            @unique
  platformFee     Float
  gameDevAmount   Float
  createdAt       DateTime          @default(now())
  game            Game              @relation(fields: [gameId], references: [id])
  user            User              @relation(fields: [userId], references: [id])
  UserGameBenefit UserGameBenefit[]
}

model Benefit {
  id              Int               @id @default(autoincrement())
  gameId          Int
  threshold       Float
  description     String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  game            Game              @relation(fields: [gameId], references: [id])
  UserGameBenefit UserGameBenefit[]
}

model UserGameBenefit {
  id         Int      @id @default(autoincrement())
  userId     Int
  gameId     Int
  benefitId  Int
  donationId Int
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  benefit    Benefit  @relation(fields: [benefitId], references: [id])
  donation   Donation @relation(fields: [donationId], references: [id])
  game       Game     @relation(fields: [gameId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, gameId, benefitId])
}

model PlanChange {
  id             Int          @id @default(autoincrement())
  subscriptionId Int
  oldPlan        String
  newPlan        String
  changedAt      DateTime     @default(now())
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
}

model Game {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  description     String?
  gameimageUrl    String?
  userId          Int?
  category        String?
  isStatic        Boolean           @default(false)
  benefits        Benefit[]
  Donation        Donation[]
  addedBy         User?             @relation("AddedGames", fields: [userId], references: [id])
  GameFollower    GameFollower[]
  GameUser        GameUser[]
  posts           Post[]
  UserGameBenefit UserGameBenefit[]
  users           User[]            @relation("GameToUser")
}

model GameFollower {
  id        Int      @id @default(autoincrement())
  userId    Int
  gameId    Int
  createdAt DateTime @default(now())
  status    String   @default("following")
  game      Game     @relation(fields: [gameId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, gameId])
}

model GameUser {
  gameId Int
  userId Int
  game   Game @relation(fields: [gameId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@id([gameId, userId])
}

model Friendship {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  receiver   User     @relation("ReceivedFriendships", fields: [receiverId], references: [id])
  sender     User     @relation("SentFriendships", fields: [senderId], references: [id])
}

model Message {
  id              Int      @id @default(autoincrement())
  senderId        Int
  receiverId      Int
  content         String
  createdAt       DateTime @default(now())
  conversationId  Int
  messageReceiver User     @relation("ReceiverMessages", fields: [receiverId], references: [id])
  messageSender   User     @relation("SenderMessages", fields: [senderId], references: [id])

  @@index([senderId])
  @@index([receiverId])
  @@index([conversationId])
}

model Post {
  id         Int       @id @default(autoincrement())
  content    String
  imageUrl   String?
  authorId   Int
  createdAt  DateTime  @default(now())
  gameId     Int?
  likesCount Int       @default(0)
  comments   Comment[]
  likes      Like[]
  author     User      @relation(fields: [authorId], references: [id])
  game       Game?     @relation(fields: [gameId], references: [id])
  views      View[]
}

model View {
  id       Int     @id @default(autoincrement())
  postId   Int
  userId   Int
  isViewed Boolean @default(false)
  post     Post    @relation(fields: [postId], references: [id])
  user     User    @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
}

model Like {
  postId Int
  userId Int
  post   Post @relation(fields: [postId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@id([postId, userId])
  @@unique([postId, userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  postId    Int
  userId    Int
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}
