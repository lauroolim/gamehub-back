name: GCP

on:
  push:
    branches: [main]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: |
          npm install
          npm install -g jest
          npm install --save-dev jest-junit

      - name: Run tests
        run: jest --ci --reporters=default --reporters=jest-junit
        
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: junit.xml
          retention-days: 30

  security:
    name: Security Scan
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run OWASP ZAP Scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: ${{ needs.deploy.outputs.app_url }}

  deploy:
    name: Deploy to GCP
    needs: test
    runs-on: ubuntu-latest
    environment: GameHub-GCP
    outputs:
      app_url: ${{ steps.deploy.outputs.url }}
    env:
      IMAGE_NAME: gcr.io/${{ secrets.PROJECT_ID }}/site:latest
      REGION: us-central1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.PROJECT_CREDENTIALS }}
          project_id: ${{ secrets.PROJECT_ID }}

      - name: Configure Docker
        run: |
          echo ${{ secrets.PROJECT_CREDENTIALS }} > service-account-key.json
          gcloud auth activate-service-account --key-file service-account-key.json
          gcloud config set project ${{ secrets.PROJECT_ID }}
          gcloud auth configure-docker

      - name: Build and Push Image
        run: |
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME

      - name: Deploy to Cloud Run
        id: deploy
        run: |
          URL=$(gcloud run deploy site \
            --image $IMAGE_NAME \
            --region $REGION \
            --memory 512Mi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10 \
            --platform managed \
            --port 3000 \
            --allow-unauthenticated \
            --set-env-vars "$(node generate-env-vars.js)" \
            --format='value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Save deployment URL
        run: echo ${{ steps.deploy.outputs.url }} > environment_url.txt

      - name: Upload deployment URL
        uses: actions/upload-artifact@v4
        with:
          name: environment-url
          path: environment_url.txt
          retention-days: 30